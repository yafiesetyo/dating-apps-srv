// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=../mocks/user.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	constants "github.com/yafiesetyo/dating-apps-srv/internal/constants"
	entity "github.com/yafiesetyo/dating-apps-srv/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRCreateUser is a mock of RCreateUser interface.
type MockRCreateUser struct {
	ctrl     *gomock.Controller
	recorder *MockRCreateUserMockRecorder
}

// MockRCreateUserMockRecorder is the mock recorder for MockRCreateUser.
type MockRCreateUserMockRecorder struct {
	mock *MockRCreateUser
}

// NewMockRCreateUser creates a new mock instance.
func NewMockRCreateUser(ctrl *gomock.Controller) *MockRCreateUser {
	mock := &MockRCreateUser{ctrl: ctrl}
	mock.recorder = &MockRCreateUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCreateUser) EXPECT() *MockRCreateUserMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRCreateUser) Do(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockRCreateUserMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRCreateUser)(nil).Do), arg0, arg1)
}

// MockRFindUserByID is a mock of RFindUserByID interface.
type MockRFindUserByID struct {
	ctrl     *gomock.Controller
	recorder *MockRFindUserByIDMockRecorder
}

// MockRFindUserByIDMockRecorder is the mock recorder for MockRFindUserByID.
type MockRFindUserByIDMockRecorder struct {
	mock *MockRFindUserByID
}

// NewMockRFindUserByID creates a new mock instance.
func NewMockRFindUserByID(ctrl *gomock.Controller) *MockRFindUserByID {
	mock := &MockRFindUserByID{ctrl: ctrl}
	mock.recorder = &MockRFindUserByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFindUserByID) EXPECT() *MockRFindUserByIDMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRFindUserByID) Do(arg0 context.Context, arg1 uint) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRFindUserByIDMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRFindUserByID)(nil).Do), arg0, arg1)
}

// MockRFindUserProfile is a mock of RFindUserProfile interface.
type MockRFindUserProfile struct {
	ctrl     *gomock.Controller
	recorder *MockRFindUserProfileMockRecorder
}

// MockRFindUserProfileMockRecorder is the mock recorder for MockRFindUserProfile.
type MockRFindUserProfileMockRecorder struct {
	mock *MockRFindUserProfile
}

// NewMockRFindUserProfile creates a new mock instance.
func NewMockRFindUserProfile(ctrl *gomock.Controller) *MockRFindUserProfile {
	mock := &MockRFindUserProfile{ctrl: ctrl}
	mock.recorder = &MockRFindUserProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFindUserProfile) EXPECT() *MockRFindUserProfileMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRFindUserProfile) Do(arg0 context.Context, arg1 []uint) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRFindUserProfileMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRFindUserProfile)(nil).Do), arg0, arg1)
}

// MockRFindUserByUsername is a mock of RFindUserByUsername interface.
type MockRFindUserByUsername struct {
	ctrl     *gomock.Controller
	recorder *MockRFindUserByUsernameMockRecorder
}

// MockRFindUserByUsernameMockRecorder is the mock recorder for MockRFindUserByUsername.
type MockRFindUserByUsernameMockRecorder struct {
	mock *MockRFindUserByUsername
}

// NewMockRFindUserByUsername creates a new mock instance.
func NewMockRFindUserByUsername(ctrl *gomock.Controller) *MockRFindUserByUsername {
	mock := &MockRFindUserByUsername{ctrl: ctrl}
	mock.recorder = &MockRFindUserByUsernameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFindUserByUsername) EXPECT() *MockRFindUserByUsernameMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRFindUserByUsername) Do(arg0 context.Context, arg1 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRFindUserByUsernameMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRFindUserByUsername)(nil).Do), arg0, arg1)
}

// MockRSetPremiumFeature is a mock of RSetPremiumFeature interface.
type MockRSetPremiumFeature struct {
	ctrl     *gomock.Controller
	recorder *MockRSetPremiumFeatureMockRecorder
}

// MockRSetPremiumFeatureMockRecorder is the mock recorder for MockRSetPremiumFeature.
type MockRSetPremiumFeatureMockRecorder struct {
	mock *MockRSetPremiumFeature
}

// NewMockRSetPremiumFeature creates a new mock instance.
func NewMockRSetPremiumFeature(ctrl *gomock.Controller) *MockRSetPremiumFeature {
	mock := &MockRSetPremiumFeature{ctrl: ctrl}
	mock.recorder = &MockRSetPremiumFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSetPremiumFeature) EXPECT() *MockRSetPremiumFeatureMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRSetPremiumFeature) Do(arg0 context.Context, arg1 uint, arg2 constants.Features) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockRSetPremiumFeatureMockRecorder) Do(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRSetPremiumFeature)(nil).Do), arg0, arg1, arg2)
}

// MockULogin is a mock of ULogin interface.
type MockULogin struct {
	ctrl     *gomock.Controller
	recorder *MockULoginMockRecorder
}

// MockULoginMockRecorder is the mock recorder for MockULogin.
type MockULoginMockRecorder struct {
	mock *MockULogin
}

// NewMockULogin creates a new mock instance.
func NewMockULogin(ctrl *gomock.Controller) *MockULogin {
	mock := &MockULogin{ctrl: ctrl}
	mock.recorder = &MockULoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockULogin) EXPECT() *MockULoginMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockULogin) Do(arg0 context.Context, arg1 entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockULoginMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockULogin)(nil).Do), arg0, arg1)
}

// MockUCreateUser is a mock of UCreateUser interface.
type MockUCreateUser struct {
	ctrl     *gomock.Controller
	recorder *MockUCreateUserMockRecorder
}

// MockUCreateUserMockRecorder is the mock recorder for MockUCreateUser.
type MockUCreateUserMockRecorder struct {
	mock *MockUCreateUser
}

// NewMockUCreateUser creates a new mock instance.
func NewMockUCreateUser(ctrl *gomock.Controller) *MockUCreateUser {
	mock := &MockUCreateUser{ctrl: ctrl}
	mock.recorder = &MockUCreateUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUCreateUser) EXPECT() *MockUCreateUserMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUCreateUser) Do(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUCreateUserMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUCreateUser)(nil).Do), arg0, arg1)
}

// MockUViewProfile is a mock of UViewProfile interface.
type MockUViewProfile struct {
	ctrl     *gomock.Controller
	recorder *MockUViewProfileMockRecorder
}

// MockUViewProfileMockRecorder is the mock recorder for MockUViewProfile.
type MockUViewProfileMockRecorder struct {
	mock *MockUViewProfile
}

// NewMockUViewProfile creates a new mock instance.
func NewMockUViewProfile(ctrl *gomock.Controller) *MockUViewProfile {
	mock := &MockUViewProfile{ctrl: ctrl}
	mock.recorder = &MockUViewProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUViewProfile) EXPECT() *MockUViewProfileMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUViewProfile) Do(arg0 context.Context, arg1 entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUViewProfileMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUViewProfile)(nil).Do), arg0, arg1)
}

// MockUViewDatingProfile is a mock of UViewDatingProfile interface.
type MockUViewDatingProfile struct {
	ctrl     *gomock.Controller
	recorder *MockUViewDatingProfileMockRecorder
}

// MockUViewDatingProfileMockRecorder is the mock recorder for MockUViewDatingProfile.
type MockUViewDatingProfileMockRecorder struct {
	mock *MockUViewDatingProfile
}

// NewMockUViewDatingProfile creates a new mock instance.
func NewMockUViewDatingProfile(ctrl *gomock.Controller) *MockUViewDatingProfile {
	mock := &MockUViewDatingProfile{ctrl: ctrl}
	mock.recorder = &MockUViewDatingProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUViewDatingProfile) EXPECT() *MockUViewDatingProfileMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUViewDatingProfile) Do(arg0 context.Context, arg1 entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUViewDatingProfileMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUViewDatingProfile)(nil).Do), arg0, arg1)
}

// MockUPurchase is a mock of UPurchase interface.
type MockUPurchase struct {
	ctrl     *gomock.Controller
	recorder *MockUPurchaseMockRecorder
}

// MockUPurchaseMockRecorder is the mock recorder for MockUPurchase.
type MockUPurchaseMockRecorder struct {
	mock *MockUPurchase
}

// NewMockUPurchase creates a new mock instance.
func NewMockUPurchase(ctrl *gomock.Controller) *MockUPurchase {
	mock := &MockUPurchase{ctrl: ctrl}
	mock.recorder = &MockUPurchaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUPurchase) EXPECT() *MockUPurchaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUPurchase) Do(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUPurchaseMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUPurchase)(nil).Do), arg0, arg1)
}
