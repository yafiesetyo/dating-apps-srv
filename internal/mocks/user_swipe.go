// Code generated by MockGen. DO NOT EDIT.
// Source: user_swipe.go
//
// Generated by this command:
//
//	mockgen -source=user_swipe.go -destination=../mocks/user_swipe.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	constants "github.com/yafiesetyo/dating-apps-srv/internal/constants"
	entity "github.com/yafiesetyo/dating-apps-srv/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRCreateUserSwipe is a mock of RCreateUserSwipe interface.
type MockRCreateUserSwipe struct {
	ctrl     *gomock.Controller
	recorder *MockRCreateUserSwipeMockRecorder
}

// MockRCreateUserSwipeMockRecorder is the mock recorder for MockRCreateUserSwipe.
type MockRCreateUserSwipeMockRecorder struct {
	mock *MockRCreateUserSwipe
}

// NewMockRCreateUserSwipe creates a new mock instance.
func NewMockRCreateUserSwipe(ctrl *gomock.Controller) *MockRCreateUserSwipe {
	mock := &MockRCreateUserSwipe{ctrl: ctrl}
	mock.recorder = &MockRCreateUserSwipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCreateUserSwipe) EXPECT() *MockRCreateUserSwipeMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRCreateUserSwipe) Do(arg0 context.Context, arg1 entity.UserSwipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockRCreateUserSwipeMockRecorder) Do(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRCreateUserSwipe)(nil).Do), arg0, arg1)
}

// MockUSwipe is a mock of USwipe interface.
type MockUSwipe struct {
	ctrl     *gomock.Controller
	recorder *MockUSwipeMockRecorder
}

// MockUSwipeMockRecorder is the mock recorder for MockUSwipe.
type MockUSwipeMockRecorder struct {
	mock *MockUSwipe
}

// NewMockUSwipe creates a new mock instance.
func NewMockUSwipe(ctrl *gomock.Controller) *MockUSwipe {
	mock := &MockUSwipe{ctrl: ctrl}
	mock.recorder = &MockUSwipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUSwipe) EXPECT() *MockUSwipeMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUSwipe) Do(arg0 context.Context, arg1, arg2 uint, arg3 constants.SwipeAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUSwipeMockRecorder) Do(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUSwipe)(nil).Do), arg0, arg1, arg2, arg3)
}
