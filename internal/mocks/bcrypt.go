// Code generated by MockGen. DO NOT EDIT.
// Source: bcrypt.go
//
// Generated by this command:
//
//	mockgen -source=bcrypt.go -destination=../mocks/bcrypt.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBCrypt is a mock of BCrypt interface.
type MockBCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockBCryptMockRecorder
}

// MockBCryptMockRecorder is the mock recorder for MockBCrypt.
type MockBCryptMockRecorder struct {
	mock *MockBCrypt
}

// NewMockBCrypt creates a new mock instance.
func NewMockBCrypt(ctrl *gomock.Controller) *MockBCrypt {
	mock := &MockBCrypt{ctrl: ctrl}
	mock.recorder = &MockBCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBCrypt) EXPECT() *MockBCryptMockRecorder {
	return m.recorder
}

// CompareAndHash mocks base method.
func (m *MockBCrypt) CompareAndHash(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareAndHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareAndHash indicates an expected call of CompareAndHash.
func (mr *MockBCryptMockRecorder) CompareAndHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareAndHash", reflect.TypeOf((*MockBCrypt)(nil).CompareAndHash), arg0, arg1)
}

// GenerateFromPassword mocks base method.
func (m *MockBCrypt) GenerateFromPassword(arg0 []byte, arg1 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockBCryptMockRecorder) GenerateFromPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockBCrypt)(nil).GenerateFromPassword), arg0, arg1)
}
